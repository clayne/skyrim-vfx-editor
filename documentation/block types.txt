----
Node
----
Used for grouping and transforming.

Name:
A unique identifier for this block.

Children:
Blocks that inherit our transform.

References:
Blocks that reference us (without inheriting).

Parent:
The node we should inherit.

Transform:
Our transform from the parent node.

----
Root
----
A unique Node that is created automatically when a file is loaded or created. Only blocks that are 
somehow attached to the root will be exported when the file is saved.

----------------
Particle system
----------------
Continuously generates ("emits") a collection of individual objects ("particles") lasting a finite duration.
These can move around with a predetermined speed and/or as a result of acceleration by virtual force fields.
Properties of particles typically have a spread measure, so that there can be a distribution of e.g. sizes and speeds.
Particles are drawn in game as squares (facing the viewer), which may be coloured and/or display an image.

Most of the functionality of particle systems is controlled by modifiers. At least one emitter modifier is required.

Shader [Required]:
Effect shader for this object.

Blend mode:
How to blend particle colour with the background.
Add: Final colour is the sum of particle colour (times alpha) and background colour. Typically used for particles representing lights.
Mix: Final colour is interpolated between particle colour and background colour, based on particle alpha. 
This is "normal" transparency, typically used for reflective particles (smoke, e.g.). Requires a texture.

World space:
Emit particles in world space rather than local space. 
Local-space particles follow the object that emitted them, world-space trail behind it.

Particle limit:
Maximum number of particles this system will emit (there may be a built-in limit as well).

Texture atlas layout:
If a texture is attached (via an effect shader), indicates that the image contains H x V subimages.
Each particle will be assigned to display one randomly selected subimage.

Modifiers [Requires at least one emitter]:
The first in a sequence of modifiers. Order matters, at least in theory. In pratice, it usually doesn't.

-----------------------------
Emitter (box/cylinder/sphere)
-----------------------------
Emits particles from a volume of the given shape.

Birth rate:
Number of emitted particles per second.

Life span:
Time before a particle is removed, in seconds.

Size:
Size of a particle, in length units (approximately 1-1.5 cm at scale 1).

Vertex colour:
Multiplied with texture colour (if any) to produce the particle colour.
Note that particles use additive blending, so black is equivalent to transparency.

Magnitude:
Initial speed of a particle, in length units per second

Azimuth:
Initial direction of a particle. Denotes the angle around local z, going counter clockwise from local x (seen from positive z).

Elevation:
Initial direction of a particle. Denotes the angle from the local xy-plane towards positive z.

Emitter object [Required-ish]:
A node that provides us with a coordinate system. The shape and position of the emitter volume, 
as well as the velocity of particles, are determined by the transforms of the emitter object (not the particle system!).
Required for some functionality (world-space emission, e.g.). 

Width/height/depth/length/radius:
Measures of the volume from which particles will be emitted. Indicated axes are the local axes of the emitter object.

------------------------------
Force field (planar/spherical)
------------------------------
Accelerates particles as if affected by a force field (planar or spherical symmetry).
A planar field accelerates particles in one specific direction.
A spherical field accelerates particles to/from a center point.
Called "gravity modifier" internally, but is really just a generic force field that can be used for any purpose.

Field object [Required]:
A node that provides us with a coordinate system (similarly to the emitter object of volume emitters).
In planar symmetry, the axes of the direction are the local axes of the field object (unless world aligned).
In spherical symmetry, the center of the field is the local origin of the field object.

Strength:
Strength of the field, by some measure. Maybe the acceleration exactly (length units per square second)? Unsure.

Decay:
Diminishes the strength by distance from the field object.

Turbulence / Turbulence scale:
Adds a degree of randomness to the acceleration. The exact nature of the two parameters are unclear, both have a similar effect.

Direction:
Direction of the acceleration, in the local space of the field object.

World aligned:
Only works with world-space particles.
If checked, the direction is interpreted in the global space instead of in the local space of the field object.
The position of the field object is still used for decay.

------------------------
Colour modifier (simple)
------------------------
This modifier overrides the vertex colour set by an emitter.
Makes the vertex colour of particles depend on their age, so that they are born with one colour and die with another.
Allows setting three different colours that particles will progress through, and the timings for when to switch or blend them.

Alpha and RGB values are controlled independently from one another.
The two controls above the gradient are for alpha. The first indicates the start of alpha 2 and the second the end of it.
Outside the controls alpha blends to alpha 1 and 3 at birth and death, respectively.
The four controls below the gradient are for RGB, and indicate the end of colour 1, start of colour 2, 
end of colour 2 and start of colour 3.

-----------------
Rotation modifier
-----------------
Allows rotation of particles (i.e. rotation of the squares they are drawn as).
Only rotation around the view axis is allowed. The squares always face the viewer.

Initial:
The initial orientation of the square.

Speed:
Angular speed in degrees per second, clockwise.

Random direction:
If checked, each particle will choose its direction of rotation at random (clockwise or counter clockwise).

--------------
Scale modifier
--------------
Allows particle size to vary with age. Multiplies the size (given by the emitter) by a scale factor,
which may be set to vary over a particle's lifetime.
Any number of scale points may be added, but they must be evenly spaced in time.
To make a smooth curve with a given shape, it usually works to make a rough sketch with as few points
as possible and then just add more segments (this applies smoothing automatically).

-------------
Effect shader
-------------
Sets rendering options for an object.

Emissive colour:
Has two usage modes.
The normal mode is to add an additional colour to the object (or rather, multiply it).
The total colour is vertex x texture x emissive.

If a palette is enabled, emissive colour is *instead* used as the y coordinate for the palette image.
With palette use RGB option, the red channel of emissive colour is used as y coordinate for sampling RGB.
With palette use alpha option, the alpha channel of emissive colour is used as y coordinate for sampling alpha.

Emissive multiple:
Multiplies the final colour (i.e. after palette sampling).

Texture:
Path to an image to draw onto the object, starting from the game's texture folder.

Palette:
Path to an image that determines the final colour through a sampling procedure.

If use RGB is checked:
For each point on the object, the resulting RGB will be the value of the palette image at 
x = (texture R x vertex colour R), y = emissive colour R.

If use alpha is checked:
For each point on the object, the resulting alpha will be the value of the palette image at 
x = (texture alpha x vertex colour alpha), y = emissive colour alpha.

(origin at top left, coordinates normalised by texture size)

----------
Extra data
----------
Attached to the root to set various additional properties.
Weapon type data: required for sheathing of weapons to work.